✅ 1. 반복 일정 설정 구조 개념 정리
항목	설명
기준 날짜 (baseDate)	일정이 시작되는 기준일
반복 타입 (repeatType)	none, weekly, monthly
반복 주기 (interval)	1 = 매주/매월, 2 = 격주/격월 등
반복 기준 (basis)	요일 기준, 날짜 기준 (월간)
반복 요일 (weekdays)	[06] (일토), 주간일 경우만 사용
반복 횟수 (repeatCount)	n회 반복 (0은 무한 반복)
반복 종료일 (endDate)	특정 일 이후 종료될 경우 사용 (선택적)

📦 2. 반복 일정 데이터 구조 설계
ts
복사
편집
interface RepeatRule {
  type: 'none' | 'weekly' | 'monthly';
  interval: number; // 반복 주기 (1 = 매주/매월, 2 = 격주/격월)
  weekdays?: number[]; // 주간 반복용 요일 (0~6)
  basis?: 'weekday' | 'date'; // 월간 반복 기준
  repeatCount?: number; // 반복 횟수 (없으면 무한 반복)
  endDate?: string; // 종료 날짜 (선택적)
  baseDate: string; // 최초 일정 생성일
}
✅ 모든 일정은 groupId로 연결되어 있어야 하며, 삭제/수정 시 그룹 단위로 관리 가능해야 함.

📅 3. 반복 일정 생성 로직 (기준 + 반복 분리)
📌 핵심 조건:
baseDate는 반복 조건과 무관하더라도 무조건 1회 생성

이후는 repeatType 기준으로 생성

✅ A. 주간(weekly) 반복 생성
ts
복사
편집
function generateWeeklyEvents(rule: RepeatRule): Event[] {
  const events: Event[] = []
  const base = new Date(rule.baseDate)
  let weekIndex = 0

  while (!rule.repeatCount || weekIndex < rule.repeatCount) {
    rule.weekdays?.forEach(day => {
      const current = new Date(base)
      current.setDate(base.getDate() + weekIndex * 7 * rule.interval)
      const adjusted = new Date(current)
      adjusted.setDate(adjusted.getDate() + ((day - current.getDay() + 7) % 7))
      const dateStr = adjusted.toISOString().split('T')[0]

      // baseDate 중복 방지
      if (dateStr !== rule.baseDate) {
        events.push({ date: dateStr })
      }
    })
    weekIndex++
  }
  return events
}
✅ B. 월간(monthly) 반복 생성
ts
복사
편집
function generateMonthlyEvents(rule: RepeatRule): Event[] {
  const events: Event[] = []
  const base = new Date(rule.baseDate)
  let monthIndex = 0

  while (!rule.repeatCount || monthIndex < rule.repeatCount) {
    const currentMonth = new Date(base)
    currentMonth.setMonth(base.getMonth() + rule.interval * monthIndex)

    if (rule.basis === 'date') {
      currentMonth.setDate(base.getDate())
      const dateStr = currentMonth.toISOString().split('T')[0]
      if (dateStr !== rule.baseDate) {
        events.push({ date: dateStr })
      }
    } else if (rule.basis === 'weekday') {
      const nth = Math.floor((base.getDate() - 1) / 7)
      const weekday = base.getDay()
      const adjusted = getNthWeekday(currentMonth.getFullYear(), currentMonth.getMonth(), weekday, nth)
      const dateStr = adjusted.toISOString().split('T')[0]
      if (dateStr !== rule.baseDate) {
        events.push({ date: dateStr })
      }
    }
    monthIndex++
  }

  return events
}
🗑️ 4. 삭제 로직 리디자인
💣 기존 문제
"이후 삭제" 시 전체 반복 일정 삭제되는 버그 발생

✅ 해결 방식
모든 일정에 groupId + date 저장

삭제 시 DELETE /schedules?groupId=abc&from=2025-07-15 형태로 사용

ts
복사
편집
function deleteRepeatEvents(groupId: string, fromDate: string) {
  db.schedules = db.schedules.filter(ev =>
    ev.groupId !== groupId || new Date(ev.date) < new Date(fromDate)
  )
}
🎨 5. UI 구성 요소별 기능 설명
UI 필드	설명
반복 설정	없음 / 주간 / 월간 선택
반복 주기	매주, 격주, 매월, 격월 설정 (interval 값)
기준 날짜	일정의 시작일 (1회 생성)
반복 요일	주간일 경우 선택 가능한 요일
반복 기준	월간일 경우 요일 기준 vs 날짜 기준
반복 횟수	정해진 횟수만큼 반복 생성
종료일 (선택)	반복을 중단할 날짜가 있다면 종료일로도 조절 가능

🧠 충돌 방지 조건
조건	처리 방식
기준 날짜와 반복 조건 중복	baseDate는 1회 생성, 이후 중복 제거 (Set)
단일 일정 + 반복일정 겹침	단일 일정에는 isRepeat: false, 반복 일정은 groupId 포함으로 분리
같은 날에 2개 이상의 일정 존재	date + groupId로 충돌 감지하여 alert 또는 병합 선택 제공

🧾 최종 요약
항목	설명
✅ 반복 기준	주간/월간 선택 가능, 요일 또는 날짜 기준 모두 지원
🔁 반복 주기	매주, 격주, 매월, 격월 등 interval로 표현
🎯 반복 횟수	repeatCount로 제한하거나 무한 생성 가능
🛡 충돌 방지	baseDate와 반복 조건의 중복 감지 및 제거
🗑 반복 삭제	groupId + fromDate 필터 삭제로 정확한 삭제 가능